#!/usr/bin/env perl
use lib '../modules';
use strict;
use Mojolicious::Lite;
use DBI;
use Mojo::Log;
use Mojo::JSON qw(decode_json encode_json);
use SearchTweet;
use CompareSch;

# Log to STDERR
my $log = Mojo::Log->new;
# Connect to database
my $dbh = DBI->connect("dbi:SQLite:cp_db","","") or die "DB connection failed";

my $scheduleInfo = Schedule::getSchedule();
get '/' => sub {
  my $c = shift;
  $c->render(template => 'index');
};

get '/courses' => sub {
  my $c = shift;
  my $sth = $dbh->prepare('SELECT * FROM Courses');
  $sth->execute;
  my $arr = $sth->fetchall_arrayref;
  my @courses = ();

  foreach my $row (@$arr) {
    push(@courses, {title => $row->[1], name => $row->[2], type => $row->[3]});
  }

  my $result = encode_json({message => 'getCourses', courses => \@courses});
  $c->render(json => $result);
};

post '/schedule' => sub {
  my $c = shift;
  my @completed_courses = decode_json($c->req->body);

  #TODO: Call parser function here

  my $schedule = CompareSch::compareSchedule(\@completed_courses, $scheduleInfo);

  $c->render(json => $c->req->body);
};

websocket '/news' => sub {
  my $self = shift;

  $self = $self->inactivity_timeout(3600);

  $self->on(message => sub {
    my ($self, $message) = @_;
    if ($message eq 'getTweets') {
      $log->debug("Getting tweets and sending data to socket");
      my $result = SearchTweet::get_tweets('calpolypomona');
      $self->send(encode_json($result));
    }
  });
};

app->start;
